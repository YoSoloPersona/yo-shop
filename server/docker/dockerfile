# syntax=docker/dockerfile:1.7

ARG NODE_VERSION=21

# BASE
FROM node:${NODE_VERSION}-alpine as base

# do not install packages in the root directory
ENV NPM_CONFIG_PREFIX=/home/node/.npm-global 
# you can run binaries of globally installed packages
ENV PATH=$PATH:/home/node/.npm-global/bin

# —Åreate a directory
WORKDIR  /usr/src/app

EXPOSE 3000

#*************
# DEPENDENCIES
#*************
FROM base as dependencies

# package without devDependencies
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=bind,source=.npmrc,target=.npmrc \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev

# process manager
RUN npm install pm2 -g

#*****************
# DEV-DEPENDENCIES
#*****************

# packages with devDependencies
FROM dependencies as devdependencies

RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=bind,source=.npmrc,target=.npmrc \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev

#*****************
# DEV-DEPENDENCIES
#*****************
FROM devdependencies as development

# copy all other files and folders, except for those specified in .dockerignore (node_modules, .env, ...etc)
COPY . .

# ! 

CMD ["npm", "run", "start-development"]

#***********
# INIT TESTS
#***********
FROM devdependencies as test-units

COPY . .

# build
RUN npm run build

CMD npm run test

#******
# BUILD
#******
FROM base as build

RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=bind,source=.npmrc,target=.npmrc \
    --mount=type=cache,target=/root/.npm \
    npm ci

COPY . .

# build
RUN npm run build

# PRODUCTION
FROM base as production

# use production node environment by default.
ENV NODE_ENV production

# run the application as a non-root user.
USER node

# Copy package.json so that package manager commands can be used
COPY package.json .

# Copy only the necessary data from other builds to reduce the build size
COPY --from=dependencies /usr/src/app/node_modules ./node_modules
COPY --from=dependencies /home/node /home/node
COPY --from=build /usr/src/app/dist ./dist

EXPOSE 3000

# Start server
CMD ["pm2-runtime", "./dist/index.js", "-i", "max"]