# syntax=docker/dockerfile:1

ARG NODE_VERSION=21

# BASE
FROM node:${NODE_VERSION}-alpine as base

# —Åreate a directory
WORKDIR  /usr/src/app

EXPOSE 3000

# DEPENDENCIES
FROM base as dependencies

# package without devDependencies
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=bind,source=.npmrc,target=.npmrc \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev

# DEVELOPMENT package with devDependencies
FROM base as development

    # package.json
    # package-lock.json
    # node_modules
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=bind,source=.npmrc,target=.npmrc \
    --mount=type=cache,target=/root/.npm \
    npm ci --include=dev

    # copy all other files and folders, except for those specified in .dockerignore (node_modules, .env, ...etc)
COPY . .

# compile, i.e. form the folder ./dist
CMD npm run development

# BUILD
FROM dependencies as build

RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=bind,source=.npmrc,target=.npmrc \
    --mount=type=cache,target=/root/.npm \
    npm ci

COPY . .

# build
RUN npm run build

# PRODUCTION
FROM base as production

# use production node environment by default.
ENV NODE_ENV production

# run the application as a non-root user.
USER node

# Copy package.json so that package manager commands can be used
COPY package.json .

COPY --from=dependencies /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/dist ./dist

EXPOSE 3000

# Start server
CMD ["node", "./dist/index.js"]